I"!<h1 id="function-overloading">Function Overloading</h1>
<p>다른 언어를 써 본 경험이 있다면 <code class="language-plaintext highlighter-rouge">Overloading</code>가 뭔지 알 것이다.<br />
하지만 <code class="language-plaintext highlighter-rouge">Javascript</code>가 시작 언어고, 다른 언어를 전혀 써본 경험이 없다면 생소할 수 있는데, 쉽게 말해서 <strong>동일한 함수에 넘기는 <code class="language-plaintext highlighter-rouge">Parameter</code>로 실행 로직을 달리하는</strong> 방법이라고 보면 된다.</p>

<p>만약에 매개변수로 <code class="language-plaintext highlighter-rouge">a</code> <code class="language-plaintext highlighter-rouge">b</code> <code class="language-plaintext highlighter-rouge">c</code>라는 <code class="language-plaintext highlighter-rouge">number</code>를 넘겨받는 함수가 있다고 생각해보자.<br />
이 함수의 기능은 <code class="language-plaintext highlighter-rouge">a</code>와 <code class="language-plaintext highlighter-rouge">b</code>만 입력된다면 덧셈을, <code class="language-plaintext highlighter-rouge">a</code>와 <code class="language-plaintext highlighter-rouge">b</code>와 <code class="language-plaintext highlighter-rouge">c</code>가 입력 된다면 곱셈을 처리하는 기능을 갖고 있다.<br />
이를 <code class="language-plaintext highlighter-rouge">Javascript</code>로 처리한다면 아래와 같이 처리할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">numberLogic</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>뭐… 문제는 없는데, <code class="language-plaintext highlighter-rouge">a</code>와 <code class="language-plaintext highlighter-rouge">b</code>와 <code class="language-plaintext highlighter-rouge">c</code>를 함수에게 어떻게 전달해야 하는지 메뉴얼이 부족하다.<br />
<code class="language-plaintext highlighter-rouge">Typescript</code>에서는 <code class="language-plaintext highlighter-rouge">Overloading</code>을 통해 더욱 명시적으로 작성할 수 있다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">numberLogic</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">numberLogic</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">c</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">numberLogic</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">c</span><span class="p">?:</span> <span class="kr">any</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numberLogic</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numberLogic</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numberLogic</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>분명 함수의 구현부는 매개변수의 <code class="language-plaintext highlighter-rouge">type</code>을 <code class="language-plaintext highlighter-rouge">any</code>로 받고 있지만 매개변수에 문자열을 넘기면 에러가 난다.<br />
구현부의 로직은 <code class="language-plaintext highlighter-rouge">Overloading</code>된 함수들의 요구사항을 충족하기 위한 개념일 뿐이고, <code class="language-plaintext highlighter-rouge">Function Prototype</code>의 요구 조건 중 하나를 충족해야만 실행이 가능하다.</p>
<h2 id="union-type">Union Type</h2>
<p><code class="language-plaintext highlighter-rouge">Overloading</code>이라는 개념은 이제 알겠는데, 개인적으로는 좀 별로다.<br />
일단 <code class="language-plaintext highlighter-rouge">const a = () =&gt;</code> 구조를 사용할 수 없다는 점이 첫번째, 유효한 <code class="language-plaintext highlighter-rouge">Type</code>을 선언하기 위해서 <code class="language-plaintext highlighter-rouge">Prototype</code>을 선언해야 한다는 것 자체가 솔직히 부담스럽다.<br />
나같은 사람을 위해서 <code class="language-plaintext highlighter-rouge">Typescript</code>는 <code class="language-plaintext highlighter-rouge">Type</code>변화가 거의 없는 심플한 구조에 적용하기 좋은 연산자를 제공한다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">len</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">any</span><span class="p">[]):</span> <span class="kr">number</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>배열 혹은 문자열이 와야하는 심플한 구조의 경우 <code class="language-plaintext highlighter-rouge">|</code> 연산자를 통해 쉽게 구현할 수 있다.</p>
:ET