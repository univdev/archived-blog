<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[999. Typescript 에러 모음]]></title>
      <url>/typescript/note/2022/01/14/999.typescript_%EC%97%90%EB%9F%AC/</url>
      <content type="text"><![CDATA[Typescript 관련 컴파일 오류목록Cannot find module ‘typescript’https://stackoverflow.com/questions/44611526/how-to-fix-cannot-find-module-typescript-in-angular-4npm install -g typescriptnpm link typescriptReference - https://grr1.tistory.com/42]]></content>
      <categories>
        
          <category> Typescript </category>
        
          <category> Note </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[11. 열거형]]></title>
      <url>/typescript/2022/01/14/11.enum/</url>
      <content type="text"><![CDATA[Enum개요프로그래밍을 배우다보면 Enumeration 자료형에 대해서 들어본 적이 있을 것이다.일정 범위 안에 들어오는 값만을 고를 수 있는 자료형으로, 열거형이라고 부른다. 아래 예제를 보자.const paint = (brush) =&gt; {  if (brush === 'square') return console.log('square');  if (brush === 'circle') return console.log('circle');  return console.log('nothing');};그림판에서 brush의 모양에 따라 그려지는 방식을 다르게 한다고 하면 위와 같이 구현이 가능할 것이다.하지만 매개변수의 brush의 값은 square circle 둘 중 하나여야만 정상적으로 동작한다. 물론 그 외 값이 들어와도 nothing 처리를 해뒀기 때문에 에러는 나지 않지만 nothing이 표시가 되는 일은 없어야 한다.그럴 때 열거형을 사용할 수 있다.const enum BrushType = {  SQUARE = 'square',  CIRCLE = 'circle',};const paint = (brush: BrushType) =&gt; {  // ...};paint(BrushType.SQUARE); // paint('square');enum 키워드로 열거형을 선언할 수 있으며, type처럼 사용할 수 있다.Value가 없는 열거형만약 enum객체를 선언할 때 굳이 value를 지정해주지 않아도 될 상황이 있다.어차피 enum만 허용할건데 enum을 대표하는 value들을 지정해 줄 필요는 없기 때문이다.const enum BrushType {  CIRCLE, // 0  SQUARE, // 1};const draw = (brush: BrushType) =&gt; {  if (brush === BrushType.CIRCLE) return console.log('Circle');  if (brush == BrushType.SQUARE) return console.log('Square');  return console.log('Nothing!');};draw(BrushType.CIRCLE);draw('Hello'); // Error위와 같은 방법으로 사용할 수 있다.Type Union을 이용한 Enum그런데 몇가지 되지도 않는 선택지 때문에 enum 객체를 선언하기 애매한 상황이라면 다음과 같은 선택지도 존재한다.const paint = (brush: 'square' | 'circle') =&gt; {  if (brush === 'square') return console.log('square');  if (brush === 'circle') return console.log('circle');  return console.log('nothing');};'square' | 'circle'와 같은 방식으로 유효 범위를 지정하여 Type을 간단하게 만들 수 있다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[10. 클래스]]></title>
      <url>/typescript/2022/01/14/10.class/</url>
      <content type="text"><![CDATA[Classtypescript를 쓰는 이유라고 할 수 있는 class이다.javascript에서도 class문법이 이미 있긴 하지만 우리가 원하는 객체지향 프로그래밍 언어 수준까지는 지원해주지 않기 때문에 javascript에서의 class는 그저 좀 더 구체적인 객체처럼 다루기 위해서 쓰는 것에 불과했기 때문이다.Fieldclass Point {  x: number;  y: number;}const pt = new Point();객체의 타입 선언과 비슷한 문법으로 class의 field 정의를 할 수 있다. (다만 위 코드는 오류가 날 것이다.)초기화 생략위 코드를 직접 실행 해봤다면 에러가 표시 되는 것을 확인할 수 있었을 것이다.class를 구성하고 있는 변수들은 반드시 constructor에서 초기화를 진행해줘야 하기 때문이다.만약 멤버 변수들의 정의만을 하고 싶을 뿐, constructor에서 초기화를 진행하고 싶지 않다면 확정 할당 연산자(Non-null assertion operator)를 사용한다. !class Point {  x!: number;  y!: number;}const pt = new Point();console.log(pt.x, pt.y); // undefined undefined멤버 변수 이름 뒤에 !를 붙이면 constructor에서 초기화를 해야하는 의무를 선택사항으로 만들 수 있다.다만 초기화를 진행하지 않으면 undefined가 나오게 된다.Readonly멤버 변수에 readonly 속성을 사용할 수도 있다.class Greeter {  readonly name: string = "world";   constructor(otherName?: string) {    if (otherName !== undefined) {      this.name = otherName;    }  }   err() {    this.name = "not ok"; // Cannot assign to 'name' because it is a read-only property.  }}const g = new Greeter();g.name = "also not ok"; // Cannot assign to 'name' because it is a read-only property.readonly 속성이 주어진 멤버 변수는 클래스 내부에서도, 외부에서도 수정이 불가능한 상태가 된다.Constructor어느 객체지향 언어처럼 생성자 역시 지원한다.class Point {  x: number;  y: number;   // Normal signature with defaults  constructor(x = 0, y = 0) {    this.x = x;    this.y = y;  }}constructor라는 이름으로 클래스 내에서 함수를 정의하면 해당 함수는 생성자로서 취급받는다.생성자란?const point: Point = new Point(); 처럼 new연산자를 통해 Instance를 생성할 때 실행되는 함수이다.new Point(1, 2)와 같이 파라미터를 넘겨주면 constructor 함수를 통해 받을 수 있다.Constructor overloadingclass Point {  // Overloads  constructor(x: number, y: string);  constructor(s: string);  constructor(xs: any, y?: any) {    // TBD  }}일반 멤버 함수와 마찬가지로 constructor역시 Overloading이 가능하다.필요하다면 Union Type도 사용할 수 있다.Super call다른 객체지향 언어를 써 본 사람이라면 역시 super도 이해하기 쉬울 것이다.클래스는 exntends를 지원한다. 그렇다면 자식 클래스의 인스턴스를 생성하게 되면 부모 클래스의 constructor는 언제 실행되는 걸까?class Base {  constructor() {}}class Children extends Base {  constructor() {}}const childrenInstance: Children = new Children();정확히 말하면 부모 클래스의 constructor는 영원히 실행되지 않는다.자식 클래스의 인스턴스를 생성한 것이지 부모의 인스턴스를 생성한 것이 아니기 때문이다.다만 자식 클래스에서 부모 클래스의 생성자를 호출해야만 하는 상황이 생길 수가 있는데, 이럴 경우에 부모의 생성자를 호출하는 함수가 super함수이다.class Base {  k = 4;} class Derived extends Base {  constructor() {    super();  }}super() 형태로 사용하면 부모의 constructor를 호출하게 된다.super를 실행하는 타이밍을 조정하는 식으로 부모 constructor의 실행 주기를 마음대로 할 수 있긴 하지만 가급적이면 constructor의 제일 첫 줄에 선언하는게 베스트이다.super를 실행하지 않으면 부모의 멤버 변수를 참조할 수 없기 때문이다.class Base {  k = 4;} class Derived extends Base {  constructor() {    console.log(this.k); // Error    super();  }}GetterJavascript에서 Array.length를 수정해 본 적이 있으면 알겠지만 실제로 값을 재정의 할 때는 아무런 에러가 나오지 않는데도 값을 재정의 한 다음 출력을 해보면 내가 정의한 값이 아닌 올바른 값이 나오는 것을 볼 수 있다.const arr = [1, 2, 3];console.log(arr.length); // 3;arr.length = 777; // OKconsole.log(arr.length); // 3;이런 Attribute는 어떻게 만드는걸까?답은 Getter이다.class Stack&lt;T&gt; {  items: T[];  constructor() {    this.items = [];  }  public push(item: T) {    this.items.push(item);  }  public get length(): number {      return this.items.length;  }}const stack: Stack&lt;number&gt; = new Stack();console.log(stack.length); // 0stack.push(1);console.log(stack.length); // 1stack.length = 777; // Cannot assign to 'length' because it is a read-only property.(2540)console.log(stack.length);함수 앞에 get 접근자를 붙이면 해당 함수 이름으로 속성을 꺼낼 때 get 접근자 함수 안에 있는 로직에 따라 값을 꺼내오게 된다.하지만 javascript에서의 예제와는 다르게 read-only 이슈가 발생하여 수정이 되지는 않는다.SetterGetter는 원하는 값을 실제로 존재하지 않는 멤버 변수명을 통해 얻어올 수 있는 방법임을 알았다.그러면 Setter도 대충 감이 올텐데, Setter는 대입 연산자(=)를 통해 Attribute에 값을 대입할 때, 정직하게 대입만 하는 것이 아닌 특정 로직을 거쳐서 값에 변조를 줄 때 사용한다.class Square {    x!: number;    y!: number;    public set square(area: number) {        this.x = Math.sqrt(area);        this.y = Math.sqrt(area);    }}const rect: Square = new Square();console.log(rect.x, rect.y); // undefined undefinedrect.square = 25;console.log(rect.x, rect.y); // 5, 5정사각형의 넓이를 입력받아서 x와 y의 길이를 구하는 클래스이다.다만 한가지 다른 점이 있다면, x와 y를 직접 초기화하지 않았음에도 불구하고 x와 y의 값이 설정 되었다는 점이다.set 설정자 통해 함수를 정의하면 해당 함수 이름을 속성처럼 사용할 수 있다.속성에 값을 대입하면 그 값을 parameter로 넘기게 되고, set함수를 실행하게 되는 것이다.Index Signatures여기서 일반 객체와 마찬가지로 Index Signatures를 사용할 수 있다.class MyClass {  [s: string]: boolean | ((s: string) =&gt; boolean);   check(s: string) {    return this[s] as boolean;  }}Class HeritageClass도 interface를 통해 멤버들의 범위를 정해줄 수 있다.interface Pingable {  ping(): void;} class Sonar implements Pingable {  ping() {    console.log("ping!");  }} class Ball implements Pingable {  pong() { // Error.    console.log("pong!");  }}Overriding다른 객체지향 언어처럼 Overriding을 지원한다.부모 클래스가 갖고있는 멤버 함수와 동일한 이름으로 설정 하되, parameter의 type이나 갯수를 다르게 설정하는 방식으로 사용한다.class Base {  greet() {    console.log("Hello, world!");  }} class Derived extends Base {  greet(name?: string) {    if (name === undefined) {      super.greet();    } else {      console.log(`Hello, ${name.toUpperCase()}`);    }  }} const d = new Derived();d.greet();d.greet("reader");super 키워드를 통해 부모의 메소드에 접근 할 수도 있다.RelationshipA클래스와 B클래스가 서로 다르다는 것을 Typescript는 어떻게 구분할까?일반 객체와 마찬가지로 Class 구성하는 멤버들을 비교하여 구분한다.class Point1 {  x = 0;  y = 0;} class Point2 {  x = 0;  y = 0;} // OKconst p: Point1 = new Point2();그렇기 때문에 위 코드가 성립 된다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[09. 타입 확장하기]]></title>
      <url>/typescript/2022/01/14/09.extending_types/</url>
      <content type="text"><![CDATA[Extending Typesclass가 상속이 되듯이, type도 상속이 가능하다.type BasicAddress = {  name?: string;  street: string;  city: string;  country: string;  postalCode: string;} interface AddressWithUnit extends BasicAddress {  unit: string;}우편번호를 입력 받을 때, 공통적으로 입력 받아야 하는 항목에 대해서 우선적으로 정의하고 추후에 선택사항을 따로 정의한 interface에 상속하는 방법으로 type을 확장시킬 수 있다.  다만, extends 키워드는 interface에서만 사용할 수 있다.다중 상속interface Colorful {  color: string;} interface Circle {  radius: number;} interface ColorfulCircle extends Colorful, Circle {} const cc: ColorfulCircle = {  color: "red",  radius: 42,};,(콤마)를 통해 상속받을 대상을 여러 개 지정할 수 있다.교차 타입비록 type에서 extends를 사용하진 못하지만 비슷한 효과를 낼 수 있는 방법이 있다.type testA = {    a: number,}type testB = {    b: string,}type testC = testA &amp; testB &amp; { good: boolean };const obj: testC = {    a: 1,    b: 'asd',    good: true,}&amp; 연산자를 사용하면 여러 type을 하나로 묶을 수 있다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[08. 인덱스 시그니처]]></title>
      <url>/typescript/2022/01/14/08.index_signatures/</url>
      <content type="text"><![CDATA[Index Signature아주 가끔 객체 안에 들어있는 속성들의 key를 특정짓지 못하는 경우가 있을 수 있다.그런 경우 객체 속성의 key를 모르는 상태이기 때문에 Type 정의에도 지장이 생긴다. 이럴 경우에는 인덱스 서명 방식을 사용할 수 있다.type Props = {  [key: number]: string | boolean | Function,};const props: Props = {    title: 'Hello world!',    1: 'good', // Type '{ title: string; 1: string; }' is not assignable to type 'Props'. Object literal may only specify known properties, and 'title' does not exist in type 'Props'.(2322)};type을 정의할 때 정확히 어떤 key로 속성이 정의 될 지 확실하지가 않다면 key가 될 수 있는 type만을 기재하여 유동적으로 객체를 확장할 수 있다.  반드시 Index Signatures의 속성은 string 혹은 ```number``여야 한다.  주의할 점  ```typescripttype Props = {  [key: string]: string | boolean | Function,  type: string, // OK  index: number, // Property ‘index’ of type ‘number’ is not assignable to ‘string’ index type ‘string | boolean | Function’.(2411)};const props: Props = {  index: 1,};Index Signatures를 사용하면 반드시 나머지 속성들도Index Signatures```의 유형을 따라야 한다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[07. 읽기 전용]]></title>
      <url>/typescript/2022/01/14/07.readonly/</url>
      <content type="text"><![CDATA[ReadonlyJavascript에서 객체를 구성하는 수많은 Attributes는 Writable하면서 Readable하다.따지고 보면 수정하면 안되는 Attribute마저도 수정이 가능하다.const test = 'good';console.log(test.length); // 4;test.length = 777; // successconsole.log(test.length); // 4;string이나 array의 length Attribute에 직접 값을 입력하는게 가능하다.물론 실제로 값이 변경되어 엉뚱한 값이 나오는 것은 아니지만 값을 대입 할 때 아무런 오류 없이 통과가 된다는 것 자체가 원하는 그림이 아니다. Javascript는 기본적으로 const로 정의 된 값이 아니라면 재정의가 가능하기 때문에 생기는 이슈이다.이번엔 같은 소스코드를 Typescript에서 실행시켜보자.const test = 'good';console.log(test.length); // 4;test.length = 777; // Cannot assign to 'length' because it is a read-only Attribute.(2540)console.log(test.length);우리가 원하는대로 length Attribute가 read-only 값으로 인식되어 수정이 불가능하다.Typescript에는 readonly키워드가 있기 때문에 가능한 일이다.type ButtonProps = {    title?: string,    disabled?: boolean,    readonly onPress?: Function,};const submitButtonProps: ButtonProps = {    title: '전송',    onPress: (): void =&gt; console.log('Submit!'),};submitButtonProps.onPress = () =&gt; console.log('Not Submit!'); // Cannot assign to 'onPress' because it is a read-only Attribute.(2540)// ...위 예제처럼 ButtonProps Type을 정의하고, submitButtonProps 객체를 ButtonProps Type으로 정의한다면 onPress Attribute에 대하여 최초로 정의한 값에서 재정의를 진행할 때 에러를 뱉는다.주의할 점readonly 키워드가 정의되면 모든 방식의 수정을 차단하는 것은 아니다. readonly 키워드는 대상의 재정의만을 차단하는 속성이기 때문이다.Readonly 속성이 붙은 객체의 Attribute 수정type ButtonProps = {    title?: string,    disabled?: boolean,    readonly onPress?: Function,    readonly children: { a: Number, b: Number },};const submitButtonProps: ButtonProps = {    title: '전송',    onPress: (): void =&gt; console.log('Submit!'),    children: {        a: 1,        b: 2,    }};submitButtonProps.children.a = 2;submitButtonProps.children은 readonly Attribute가 맞지만, submitButtonProps.children.a는 readonly가 아니므로 수정이 가능하다.구조가 동일한 서로 다른 type의 재정의interface Person {  name: string;  age: number;} interface ReadonlyPerson {  readonly name: string;  readonly age: number;} let writablePerson: Person = {  name: "Person McPersonface",  age: 42,}; // workslet readonlyPerson: ReadonlyPerson = writablePerson; console.log(readonlyPerson.age); // prints '42'writablePerson.age++;위 소스코드를 보면 writablePerson은 모든 Attributes의 수정이 가능한 Interface인 Person을 Type으로 사용했다.그런데 ReadonlyPerson이라는 type을 보면 모든 Attribute가 readonly로 정의 되어있다.변수 readonlyPerson은 ReadonlyPerson Type을 따르기 때문에 Attributes의 재정의가 원래는 불가능 해야한다. 하지만 readonlyPerson의 값을 WritablePerson Type을 베이스로 정의 된 writablePerson 변수로 정의했으니 readonlyPerson의 Attributes마저 수정이 가능하다.왜냐하면 변수를 대입하는 과정에서 Type의 호환 여부를 식별할 때 readonly는 비교 대상에서 제외되기 때문이다.재정의가 불가능한 Arraytype ArrayType = readonly [number, number, number];const arr: ArrayType = [1, 2, 3];arr[1] = 1; // Cannot assign to '1' because it is a read-only property.console.log(arr);객체 뿐 아니라 배열도 readonly 속성을 통해 데이터의 재정의를 막을 수 있다.type 정의를 하지 않는 재정의가 불가능한 Arrayconst arr = [1, 2, 3, 4, 5, 6, 7] as const;readonly 튜플을 이용하여 배열을 정의하면 해당 배열의 type이 자동으로 readonly [1, 2, 3, 4, 5, 6, 7]이 된다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[06. 오버로딩]]></title>
      <url>/typescript/2022/01/14/06.overloading/</url>
      <content type="text"><![CDATA[Function Overloading다른 언어를 써 본 경험이 있다면 Overloading가 뭔지 알 것이다.하지만 Javascript가 시작 언어고, 다른 언어를 전혀 써본 경험이 없다면 생소할 수 있는데, 쉽게 말해서 동일한 함수에 넘기는 Parameter로 실행 로직을 달리하는 방법이라고 보면 된다.만약에 매개변수로 a b c라는 number를 넘겨받는 함수가 있다고 생각해보자.이 함수의 기능은 a와 b만 입력된다면 덧셈을, a와 b와 c가 입력 된다면 곱셈을 처리하는 기능을 갖고 있다.이를 Javascript로 처리한다면 아래와 같이 처리할 수 있다.const numberLogic = (a, b, c) =&gt; {  if (!c) return a + b;  return a * b * c;};뭐… 문제는 없는데, a와 b와 c를 함수에게 어떻게 전달해야 하는지 메뉴얼이 부족하다.Typescript에서는 Overloading을 통해 더욱 명시적으로 작성할 수 있다.function numberLogic(a: number, b: number): number;function numberLogic(a: number, b: number, c: number): number;function numberLogic(a: any, b: any, c?: any): number {  if (!c) return a + b;  return a * b * c;}console.log(numberLogic(1, 2));console.log(numberLogic(1, 2, 3));console.log(numberLogic(1, 2, 'a')); // error분명 함수의 구현부는 매개변수의 type을 any로 받고 있지만 매개변수에 문자열을 넘기면 에러가 난다.구현부의 로직은 Overloading된 함수들의 요구사항을 충족하기 위한 개념일 뿐이고, Function Prototype의 요구 조건 중 하나를 충족해야만 실행이 가능하다.Union TypeOverloading이라는 개념은 이제 알겠는데, 개인적으로는 좀 별로다.일단 const a = () =&gt; 구조를 사용할 수 없다는 점이 첫번째, 유효한 Type을 선언하기 위해서 Prototype을 선언해야 한다는 것 자체가 솔직히 부담스럽다.나같은 사람을 위해서 Typescript는 Type변화가 거의 없는 심플한 구조에 적용하기 좋은 연산자를 제공한다.const len = (x: string | any[]): number =&gt; x.length;배열 혹은 문자열이 와야하는 심플한 구조의 경우 | 연산자를 통해 쉽게 구현할 수 있다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[05. 필수가 아닌 파라미터]]></title>
      <url>/typescript/2022/01/14/05.optional_parameters/</url>
      <content type="text"><![CDATA[Optional ParametersJavascript에서는 함수의 선언부에서 표기 된 Parameters 갯수를 전부 충족시키지 않은 실행이 이루어져도 에러가 나지 않는다.const consolePrint = (a, b, c) =&gt; {  console.log(a, b, c);};consolePrint(1, 2); // 1, 2, undefined그저 undefined로 출력이 될 뿐 에러 요소는 아니다.하지만 Typescript에서는 Paramters 갯수도 강제성을 띈다.const consolePrint = (a: number, b: number, c: number) =&gt; {  console.log(a, b, c);};consolePrint(1, 2); // Expected 3 arguments, but got 2만약 매개변수를 굳이 받지 않아도 되는 부분이라면 생략할 수도 있을텐데 좀 너무한 부분이다.그래서 Typescript에는 Parameter를 Optional(선택적)으로 받을 수 있도록 연산자를 지원한다.const consolePrint = (a: number, b: number, c?: number) =&gt; {  console.log(a, b, c);};consolePrint(1, 2); // 1, 2, undefined생략해도 되는 parameters 이름 뒤에 ? 연산자를 붙여주면 해당 parameter는 생략이 가능하다.여담const consolePrint = (a: number, b?: number, c: number) =&gt; { // A required paramter cannot follow optional paramter.  console.log(a, b, c);};consolePrint(1, 2);당연한 소리겠지만 Optional Paramter 뒤에는 Required Paramter를 정의할 수 없다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[04. 제네릭]]></title>
      <url>/typescript/2022/01/14/04.generic/</url>
      <content type="text"><![CDATA[Generic Function만약 당신이 Java를 익숙하게 사용하는 개발자라면 이 섹션은 이해하기 정말 쉬울 것이다. 다른 언어에서 흔히들 Generic이라고 부르는 것과 동일하기 때문이다.예를 들어, 당신이 Stack 자료구조를 직접 구현한다고 해보자.Stack에는 정말로 많은 Type의 데이터가 들어간다. Number String Boolean와 같은 모든 유형을 포함해야 한다.class Stack {  private data = [];  public push(item) {    this.data.push(item);  }  public pop() {    return this.data.pop();  }}물론 이런 형태로 작성할 수는 있겠으나, 우리가 원하는 Typescript의 형태를 띄려면 각 Method와 Paramter의 Return Type을 정의해야 한다.만약 제네릭이 없다면class NumberStack {  private data: number[] = [];  public push(item: number) {    this.data.push(item);  }  public pop(): number {    return this.data.pop();  }}class StringStack {  private data: string[] = [];  public push(item: string) {    this.data.push(item);  }  public pop(): string {    return this.data.pop();  }}/// ...이런 식으로 모든 유형에 대응하는 StackClass를 정의해야 할 것이다.이건 사실 말이 안되므로, 제네릭을 사용해서 구현을 하면 아래와 같이 표현할 수 있다.class Stack&lt;T&gt; {  private data: T[] = [];  public push(item: T) {      this.data.push(item);  }  public pop(): T | null {      return this.data.pop() || null;  }}class 이름 뒤에 &lt;T&gt;가 추가 되었다.이는 Type을 받을 수 있는 Type Variable이라고 불린다. 제네릭 타입의 객체를 사용할 때는 아래와 같이 사용하면 된다.const stack: Stack&lt;number&gt; = new Stack&lt;number&gt;();이렇게 선언하면 number타입으로 구성 된 Stack 클래스를 사용할 수 있다.예시class Stack&lt;T&gt; {    private data: T[] = [];    public push(item: T) {        this.data.push(item);    }    public pop(): T | null {        return this.data.pop() || null;    }}const stack = new Stack&lt;number&gt;();stack.push(123);console.log(stack.pop()); // 123console.log(stack.pop()); // null두 개 이상의 Type VariableType Variable은 여러개를 선언할 수도 있다.class Stack&lt;T, U&gt; {  private data: [T, U][] = [];  public push(item: [T, U]) {    this.data.push(item);  }  public pop(): [T, U] | null {    return this.data.pop() || null;  }}const stack: Stack&lt;number, string&gt; = new Stack&lt;number, stirng&gt;();stack.push([123, 'hello']);console.log(stack.pop()); // [123, 'hello']console.log(stack.pop()); // nullType 상속가독성 측면에서 쓸 일이 진짜 없을 것 같지만 가능은 하다고 하니 알아보겠다.function getFirst&lt;T extends Stack&lt;U&gt;, U&gt;(container: T): U {  const item = container.pop();  container.push(item);  return item;}getFirst&lt;Stack&lt;number&gt;, number)(numberStack);getFirst&lt;number, number&gt;(1); // Type 'number' does not satisfy the constraint 'Stack&lt;number&gt;'.참고DailyEngineering - TypeScript: 제네릭(Generic)]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[03. 시그니처]]></title>
      <url>/typescript/2022/01/14/03.signatures/</url>
      <content type="text"><![CDATA[type DescribableFunction = {  description: string;  (someArg: number): boolean;};function doSomething(fn: DescribableFunction) {  console.log(fn.description + " returned " + fn(6));}위 예제는 처음 봤을 때 뭔 소린가 싶었는데, 해석 된 글을 보고 이해한 것을 바탕으로 쉽게 풀어보겠다.Javascript의 객체들은 Property를 가질 수 있다. 예를 들어보자.const text = String("text"); // "text"const defaultStringLength = String.length; // 1String객체는 String 자체를 함수 형태로 사용하는게 가능하지만, String객체의 Property인 length에 직접 접근하여 숫자를 가져오는 것도 가능하다. (다른 객체지향 언어의 Static Member Variable을 생각하면 편할 듯 하다.)바로 이런 경우를 type으로 정의한게 아래와 같은 코드이다.type DescribableFunction = {  description: string;  (someArg: number): boolean;};DescribableFunction Type은 DescribableFunction(123) 이러한 형태로 사용하는 것도 가능하지만, DescribableFunction.description 형태로 사용하는 것도 가능한 구조라는 얘기이다.Construct Signatures위 섹션을 봤다면 본 섹션은 어렵지 않게 이해할 수 있을 것이다.Type은 생성자의 규칙마저도 선언이 가능하다.type SomeConstructor = {  new (s: string): SomeObject;};function fn(ctor: SomeConstructor) {  return new ctor("hello");}Type 객체 member에 new 연산자만 붙여주면 해당 Type의 클래스는 반드시 선언 된 Type과 동일한 형태의 Constructor를 가져야만 한다.Vanila Javascript에서 Class를 사용하는건 드문 일이니 익숙하지 않을 수 있는 부분이다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[02. 함수 타입 표현식]]></title>
      <url>/typescript/2022/01/14/02.function_type_expression/</url>
      <content type="text"><![CDATA[function greeter(fn: (a: string) =&gt; void) {  fn("Hello, World");}function printToConsole(s: string) {  console.log(s);} greeter(printToConsole);위 예제처럼 매개변수로 함수가 넘어오는 경우, 함수 갖고있는 매개변수와 해당 함수가 return하는 값의 Type을 설정하여, 해당 기능을 하는 함수들만 매개변수로 받을 수 있다.함수 greeter는 매개변수로 string Type의 변수를 한 개 받는 Return Type이 void인 함수 printToConsole을 정상적으로 받는 모습을 볼 수 있다.그런데 아무리 봐도 매개변수 자리에 fn: (a: string) =&gt; void가 오는건 솔직히 부담스럽다. 너무 길고 복잡하다.type GreetFunction = (a: string) =&gt; void;function greeter(fn: GreetFunction) {  // ...}그렇다면 이건 어떤가? type 선언은 number나 boolean과 같은 Type을 직접 커스터마이징 할 수 있는 선언문이다.일반 변수나 상수를 정의할 때와 동일한 방법을 사용하는데, 연산자 뒤에 들어오는 값은 위 코드와 같은 함수의 선언부나 객체가 들어갈 수 있다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[01. Typescript를 왜 쓸까]]></title>
      <url>/typescript/2022/01/14/01.Typescript-%EA%B8%B0%EC%B4%88/</url>
      <content type="text"><![CDATA[Type의 불확실성 제거Javascript를 사용해봤다면 아래와 같은 문제를 만난 적이 있을 것이다.message.toLowerCase();message();방대한 소스코드에서 저 부분만을 딱 잘라서 보여줬다고 가정할 때, 위 코드를 실행하면 어떤 결과가 나올 것 같은가?그건 아무도 모른다. 왜나하면 message가 프로그램 내부에서 어떻게 정의 되고 변경 되는지 알 수가 없기 때문이다. javascript에서 위 코드를 안정적으로 실행하기 위해서는 다음과 같은 확인 사항이 있다.  message라는 값이 있긴 한가?  message 안에 toLowerCase라는 메소드가 있는가?  message는 function의 역할도 수행할 수 있는가?하지만 Javascript는 기본적으로 위 궁금증들을 해결해주지 않는다. Type은 애초에 변수 정의 할 때 조차 확정되지 않으며, 추후 값을 없애거나 Type을 변경하는 것도 가능하기 때문이다.message에 만약에 Hello world가 들어가있다고 가정해보면, message.toLowerCase()는 정상 실행이 될 것임을 짐작할 수 있다.다만, 아래쪽은 TypeError: message is not a function 이라는 에러가 표시 될 뿐이다.만약 저 message가 function이 맞다고 하더라도, 저기서 반환 되어 나오는 값이 어떤 Type을 갖고있는지 전혀 모르기 때문에 추후 로직 구성에도 많은 예외 처리가 필요하다.Typescript는 위 이슈에 대해서도 아주 깔끔한 경고문을 보여준다.const message = "hello!"; message();This expression is not callable.  Type 'String' has no call signatures.비예외 실패const user = {  name: "Daniel",  age: 26,};user.location;Javascript에서는 user.location을 참조해봤자 undefined 한줄 띡 뱉어놓고 끝난 다는 것을 모두 알 것이다. 그 어떤 Exception조차 반환하지 않는다.반면에 Typescript는const user = {  name: "Daniel",  age: 26,}; user.location;// Property 'location' does not exist on type '{ name: string; age: number; }'.선언 당시에 존재하지 않은 Property에 대해서 참조하려고 하면 Type Error가 표시된다.오타 보정const announcement = "Hello World!"; // How quickly can you spot the typos?announcement.toLocaleLowercase();announcement.toLocalLowerCase(); // We probably meant to write this...announcement.toLocaleLowerCase();Typescript는 위처럼 대소문자 이슈에 대해서도 오타를 바로잡아준다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[00. Typescript 개요]]></title>
      <url>/typescript/2022/01/14/00.Typescript-%EA%B0%9C%EC%9A%94/</url>
      <content type="text"><![CDATA[Typescript개요Typescript는 Javascript의 수많은 개량 버전 중 하나이고, 그 중 가장 많은 사랑을 받고 있다.Javascript에서는 지원하지 않는 객제지향 문법을 지원하며, Javascript보다 엄격한 문법 검사를 시행하기에 에러가 상대적으로 적은 코드를 작성할 수 있다.또한, Javascript는 변수 간 Type 변환이 정말 자유롭다.별다른 조치를 취하지도 않았는데 값을 대입한 것 만으로도 string, number, Boolean을 제 집 안방마냥 드나드는 자율성을 가졌다.하지만 이로 인한 문제도 생겼는데, 각 Type마다 존재하는 고유의 Property와 Method가 존재하는지 확신할 수가 없다는 점이다.변수에 값만 대입하면 Type이 바뀌어버리니, 기존에는 문자열이였던 변수의 .length를 참조하는 로직을 사용할 때 조차 정말로 저 변수가 string이 맞는지 확인을 해야한다.Typescript는 이름답게 Type을 기초로 만들어지다보니 매개변수나 변수에 들어갈 Type을 확정지을 수 있다.장점  보다 엄격한 문법으로 에러가 적은 코드를 만들 수 있다.  객체지향 언어에서나 볼 수 있었던 class interface extends implement 등을 사용할 수 있다.  Javascript의 슈퍼셋이다보니 Typescript안에서 기존 Javascript문법을 완전 지원한다.  Typescript 컴파일러를 통해 나오는 결과물은 최종적으로 Javascript에 완전 대응되기 때문에 호환성 문제도 걱정 없다.  위에서 기재한 이유로 기존 Javascript 프로젝트의 Migration도 매우 간단하다.]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
